#
# Builds and tests the code in this repository.
#
# NOTE: We don't use CodeQL because it takes, at the time of writing, 3 minutes to run which is
#   3x the time of the "build-and-test" job. Since we already have the Microsoft Code Analysis
#   enabled, I don't expect CodeQL to offer any additional insight (especially when compared to
#   the  time it takes to execute)
#
name: Continuous Integration

on:
  push:
    branches:
      - main
  pull_request:
  workflow_dispatch:  # manual execution

# Permissions for GITHUB_TOKEN for this workflow.
# NOTES ON PERMiSSIONS: https://manski.net/articles/github/actions/cheat-sheet#security-considerations
# NOTES ON SECRETS: https://docs.github.com/en/actions/how-tos/write-workflows/choose-what-workflows-do/use-secrets#using-secrets-in-a-workflow
permissions:
  contents: read

env:
  DOTNET_VERSION: '9.0'

# NOTE: Jobs run in parallel by default (unless "needs" is defined).
jobs:

  #
  # Build & Test job
  #
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest

    steps:
      ###########################################################################
      #
      # Setup Steps
      #
      ###########################################################################

      - name: Clone Git repository
        uses: actions/checkout@v5
        with:
          lfs: true
          submodules: true

      # This creates ${{ steps.short-sha.outputs.sha }} to be used below.
      - name: Determine Git short commit hash
        id: short-sha
        uses: benjlevesque/short-sha@599815c8ee942a9616c92bcfb4f947a3b670ab0b  # version 3.0

      # NOTE: While GitHub-hosted runners come with .NET preinstalled, they ship with the latest LTS version -
      #   which may not be the version we need. So we explicitly setup .NET here
      - name: Setup .NET build environment
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '${{ env.DOTNET_VERSION }}'  # required parameter


      ###########################################################################
      #
      # Build Steps
      #
      ###########################################################################

      # See: https://docs.microsoft.com/de-de/dotnet/core/tools/dotnet-build
      # NOTE: Without specifying a solution file, "dotnet build" searches for a .sln file in the current directory.
      - name: Build code
        run: dotnet build --configuration Release

      # See: https://docs.microsoft.com/de-de/dotnet/core/tools/dotnet-test
      # NOTES:
      # * Without specifying a solution file, "dotnet test" searches for a .sln file in the current directory.
      # * There seems to be no way to name the .trx file as '<project>.trx'. If no 'LogFileName' is specified,
      #   the .trx files will be named something like "_fv-az278-737_2021-08-15_03_50_33.trx".
      # * The Option 'TreatNoTestsAsError' is documented here: https://learn.microsoft.com/en-us/visualstudio/test/configure-unit-tests-by-using-a-dot-runsettings-file?view=vs-2022#runconfiguration-element
      - name: Run tests
        id: run_tests
        run: dotnet test --configuration Release --no-restore --no-build --logger "trx;LogFileName=${{ runner.os }}.trx" --nologo -- RunConfiguration.TreatNoTestsAsError=true
        env:
          # Tells tests that they're running in a (potentially slow) CI environment.
          RUNS_IN_CI: true


      ###########################################################################
      #
      # Archive Steps
      #
      ###########################################################################

      - name: Upload test results
        uses: actions/upload-artifact@v4
        # Run this step even if "run_tests" has failed (but not if any other previous step has failed - which would
        # be "failure()" - because in this case the tests have not run and thus no .trx files have been generated).
        # See: https://docs.github.com/en/actions/learn-github-actions/expressions#failure
        if: success() || steps.run_tests.conclusion == 'failure'
        with:
          # NOTES:
          #   * To make the downloads of the test results easier to use (i.e. when downloading test results
          #     from different runs), we'll add the run number to the name.
          #   * The name is used by the test reported step in ci.yaml.
          name: 'test-results-#${{ github.run_number }}-${{ steps.short-sha.outputs.sha }}-${{ runner.os }}'
          path: '**/*.trx'
          if-no-files-found: error


  #
  # Create action test report
  #
  # NOTE: This is a separate job (from 'build-and-test') because it needs special write permissions.
  #
  test-report:
    name: Test Report
    runs-on: ubuntu-latest

    needs: build-and-test

    permissions:
      actions: read
      checks: write

    steps:
      - name: Create test report
        uses: dorny/test-reporter@dc3a92680fcc15842eef52e8c4606ea7ce6bd3f3  # version 2.1.1
        with:
          # NOTE: We add the 'github.run_number' to the name so that we can easier identify the
          #   test report if they pile up due to bug https://github.com/dorny/test-reporter/issues/67.
          #   See top of this file for more details.
          name: 'Test Report #${{ github.run_number }}'
          # The name of the artifact (minus extension) created by the CI workflow.
          artifact: /test-results-(.*)/
          # Path to test results (inside artifact .zip)
          path: '**/*.trx'
          # Format of test results
          reporter: dotnet-trx
          # Don't mark the test report generated as failed if there's a failed test.
          # Only mark it as failed if something with the workflow has actually gone wrong.
          fail-on-error: false
          # Workaround for error 'fatal: not a git repository' caused by a call to 'git ls-files'
          # (This is because this job doesn't checkout any git repository.)
          # See: https://github.com/dorny/test-reporter/issues/169#issuecomment-1583560458
          max-annotations: 0


  #
  # Publish Online Documentation
  #
  # NOTE: This is a separate job (from 'build-and-test') because it needs special write permissions.
  #
  documentation:
    name: Publish Documentation
    runs-on: ubuntu-latest

    # Only run this on the 'main' branch.
    if: github.ref == 'refs/heads/main'

    permissions:
      # This job needs permissions to push changes to the "retype" branch. Thus, it needs "write" permission.
      contents: write

    steps:

      ###########################################################################
      #
      # Setup Steps
      #
      ###########################################################################

      - name: Clone Git repository
        uses: actions/checkout@v5
        with:
          lfs: true
          submodules: false # not needed


      ###########################################################################
      #
      # Build Steps
      #
      ###########################################################################

      - name: Build HTML files
        # For pinned versions, see: https://blog.gitguardian.com/github-actions-security-cheat-sheet/#use-specific-action-version-tags
        uses: retypeapp/action-build@c6b1e770fa9194e384f1adf970afead0db550858 # version 3.11.0

      - name: Publish HTML files to GitHub Pages
        # For pinned versions, see: https://blog.gitguardian.com/github-actions-security-cheat-sheet/#use-specific-action-version-tags
        uses: retypeapp/action-github-pages@5a952a4f53fc7366288db464ec120f755e9f1303 # version 3.6.0
        with:
          # The branch where the results are stored
          branch: retype
          # Update the "retype" branch (instead of creating a new branch)
          update-branch: true
