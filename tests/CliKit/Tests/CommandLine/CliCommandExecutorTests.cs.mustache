//
// NOTE: This file has been AUTOMATICALLY GENERATED from '{{TemplateFile}}'. Any changes made to
//   this file will be LOST on the next build.
//

// SPDX-License-Identifier: MIT
// Copyright AppMotor Framework (https://github.com/skrysm/AppMotor)

using AppMotor.CliKit.CommandLine;
using AppMotor.CliKit.TestUtils;

using Shouldly;

using Xunit;

namespace AppMotor.CliKit.Tests.CommandLine;

/// <summary>
/// Tests <see cref="CliCommandExecutor"/>.
/// </summary>
public sealed class CliCommandExecutorTests
{
    private const string COMMAND_NAME = "test";

{{#tests}}
{{#returnsExitCode}}
    [Theory]
{{#exitCodeIsBool}}
    [InlineData(true)]
    [InlineData(false)]
{{/exitCodeIsBool}}
{{#exitCodeIsInt}}
    [InlineData(0)]
    [InlineData(1)]
    [InlineData(42)]
{{/exitCodeIsInt}}
{{/returnsExitCode}}
{{^returnsExitCode}}
    [Fact]
{{/returnsExitCode}}
    public void Test_{{^isAsync}}Sync{{/isAsync}}{{#isAsync}}Async{{/isAsync}}_{{^returnsExitCode}}Void{{/returnsExitCode}}{{#exitCodeIsBool}}Bool{{/exitCodeIsBool}}{{#exitCodeIsInt}}Int{{/exitCodeIsInt}}_{{#useCancellationToken}}WithCancellationToken{{/useCancellationToken}}{{^useCancellationToken}}NoCancellationToken{{/useCancellationToken}}({{#exitCodeIsBool}}bool retVal{{/exitCodeIsBool}}{{#exitCodeIsInt}}int retVal{{/exitCodeIsInt}})
    {
        // Setup
        bool called = false;

{{#useCancellationToken}}
        using var cts = new CancellationTokenSource();

{{/useCancellationToken}}
        {{^isAsync}}{{^returnsExitCode}}void{{/returnsExitCode}}{{#exitCodeIsBool}}bool{{/exitCodeIsBool}}{{#exitCodeIsInt}}int{{/exitCodeIsInt}}{{/isAsync}}{{#isAsync}}async {{^returnsExitCode}}Task{{/returnsExitCode}}{{#exitCodeIsBool}}Task<bool>{{/exitCodeIsBool}}{{#exitCodeIsInt}}Task<int>{{/exitCodeIsInt}}{{/isAsync}} Execute({{#useCancellationToken}}CancellationToken cancellationToken{{/useCancellationToken}})
        {
{{#isAsync}}
{{#useCancellationToken}}
            // ReSharper disable once MethodSupportsCancellation
{{/useCancellationToken}}
            await Task.Delay(1);
{{/isAsync}}
            called = true;
{{#useCancellationToken}}
            cancellationToken.IsCancellationRequested.ShouldBe(false);
            // ReSharper disable once AccessToDisposedClosure
{{^isAsync}}
            cts.Cancel();
{{/isAsync}}
{{#isAsync}}
            await cts.CancelAsync();
{{/isAsync}}
            cancellationToken.IsCancellationRequested.ShouldBe(true); // Validates we actually got the token from "cts"
{{/useCancellationToken}}
{{#returnsExitCode}}
            return retVal;
{{/returnsExitCode}}
        }

        var testApplication = new TestApplication(new CliCommandExecutor(Execute));

        // Test
        testApplication.AppHelper.Run([COMMAND_NAME], expectedExitCode: {{^returnsExitCode}}0{{/returnsExitCode}}{{#exitCodeIsBool}}retVal ? 0 : 1{{/exitCodeIsBool}}{{#exitCodeIsInt}}retVal{{/exitCodeIsInt}}{{#useCancellationToken}}, cts.Token{{/useCancellationToken}});

        // Verify
        called.ShouldBe(true);
        testApplication.ShouldHaveNoOutput();
    }

{{/tests}}
    private sealed class TestApplication : TestApplicationWithVerbsBase
    {
        public TestApplication(CliCommandExecutor commandExecutor)
        {
            this.Verbs = new[] { new CliVerb(COMMAND_NAME, new TestCommand(commandExecutor)) };
        }
    }

    private sealed class TestCommand : CliCommand
    {
        /// <inheritdoc />
        protected override CliCommandExecutor Executor { get; }

        /// <inheritdoc />
        public TestCommand(CliCommandExecutor commandExecutor)
        {
            this.Executor = commandExecutor;
        }
    }
}
